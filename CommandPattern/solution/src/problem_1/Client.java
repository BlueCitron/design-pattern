package problem_1;

public class Client {

    /**
     * 커맨드패턴(Command Pattern)
     *
     * 개요)
     *  다음은 버튼을 눌렀을 때 램프의 불이 켜지도록 하는 간단한 예제입니다.
     *  커맨드 패턴을 사용해 문제를 해결해보세요.
     *
     * A) 다음의 램프 예제에서 문제점이 무엇인가요?
     *
     *  문제점1) 버튼을 눌렀을 때 램프가 켜지는 대신 다른 기능을 실행하게 하려면?
     *      * Button 클래스의 pressed 메서드를 수정해야한다. 기능을 추가하기 위해 기존 클래스를 수정했으므로 OCP 위반이다.
     *
     *  문제점2) 버튼을 누르는 동작에 따라 다른 기능을 실행하게 하려면? 예를 들어 버튼을 처음 눌렀을 땐 램프를 켜고 두번째 눌렀을 땐 알람을 울리게 하려면?
     *      * 버튼을 누르는 동작에 따라 다른 기능을 실행하게 하려면 기능이 실행되는 시점에서 필요한 프로그램(혹은 메서드)를 선택할 수 있어야 한다.
     *      * 이 방법 역시 기능이 추가될 때 마다 버튼클래스를 수정해주어야 하므로 OCP 위반이다.
     *
     * B) 해결책을 제시해보세요
     *  버튼을 눌렀을 때 [실행될 기능을 캡슐화]하여 외부에서 제공받아 호출.
     *
     * C) 커맨드 패턴을 토대로 문제점을 개선해보세요.
     *
     */

    public static void main(String[] args) {
        Lamp lamp = new Lamp();
        Button button = new Button(lamp);
        button.press();
    }

    /**
     * A) 커맨드 패턴은 어떠한 패턴인가요?
     *  커맨드 패턴은 이벤트가 발생했을 때 실행될 기능이 다양하면서도 변경이 필요한 경우에
     *  이벤트를 발생시키는 클래스를 변경하지 않고 재사용하고자 할 때 사용한다.
     *
     * B) 커맨드 패턴의 클래스 다이어그램을 그리고 용어와 함께 설명해보세요(페이지 244)
     *
     */
}
